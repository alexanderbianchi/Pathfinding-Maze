{"ast":null,"code":"var _jsxFileName = \"E:\\\\CS Projects\\\\visualizer\\\\src\\\\Components\\\\pathfind.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Node from \"./Node.js\";\nimport \"./Pathfind.css\";\nimport dijkstra from \"../Algorithms/dijkstras.js\";\nimport Rmaze from \"../Algorithms/Prims Algorithm.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction makeRows() {\n  let x = Math.round(window.innerHeight / 35);\n\n  if (x % 2 == 0) {\n    return x - 1;\n  } else {\n    return x;\n  }\n}\n\nfunction makecols() {\n  let x = Math.round(window.innerWidth / 28);\n\n  if (x % 2 == 0) {\n    return x - 1;\n  } else {\n    return x;\n  }\n}\n\nconst rows = makeRows();\nconst cols = makecols();\nlet hasStart = true;\nlet hasEnd = true;\nlet nodeStartRow = 2;\nlet nodeStartCol = 2;\nlet nodeEndRow = rows - 3;\nlet nodeEndCol = cols - 3;\nlet visualized = false;\nlet visualizing = false;\n\nconst Pathfind = () => {\n  _s();\n\n  const [Grid, setGrid] = useState([]);\n  useEffect(() => {\n    initializeGrid();\n  }, []);\n\n  const createSpot = Grid => {\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        Grid[i][j] = new Spot(i, j);\n      }\n    }\n  };\n\n  const initializeGrid = () => {\n    const Grid1 = new Array(rows);\n\n    for (let i = 0; i < rows; i++) {\n      Grid1[i] = new Array(cols);\n    }\n\n    createSpot(Grid1);\n    setGrid(() => Grid1);\n  };\n\n  function Spot(i, j) {\n    this.x = i;\n    this.y = j;\n    this.f = 0;\n    this.h = 0;\n    this.g = 0;\n    this.mazeStatus = undefined;\n    this.wallNeighbors = [];\n    this.isWall = false;\n    this.connections = [];\n\n    this.addWallNeighbors = function (grid) {\n      let i = this.x;\n      let j = this.y;\n\n      if (i > 1) {\n        this.wallNeighbors.push(grid[i - 2][j]);\n      }\n\n      if (i < rows - 2) {\n        this.wallNeighbors.push(grid[i + 2][j]);\n      }\n\n      if (j > 1) {\n        this.wallNeighbors.push(grid[i][j - 2]);\n      }\n\n      if (j < cols - 2) {\n        this.wallNeighbors.push(grid[i][j + 2]);\n      }\n    };\n\n    this.visited = false;\n    this.isStart = this.x === nodeStartRow && this.y === nodeStartCol;\n    this.isEnd = this.x === nodeEndRow && this.y === nodeEndCol;\n    this.neighbors = [];\n    this.previous = undefined;\n\n    this.addNeighbors = function (grid) {\n      let i = this.x;\n      let j = this.y;\n      let rows = grid.length;\n      let cols = grid[1].length;\n\n      if (i > 0) {\n        this.neighbors.push(grid[i - 1][j]);\n      }\n\n      if (i < rows - 1) {\n        this.neighbors.push(grid[i + 1][j]);\n      }\n\n      if (j > 0) {\n        this.neighbors.push(grid[i][j - 1]);\n      }\n\n      if (j < cols - 1) {\n        this.neighbors.push(grid[i][j + 1]);\n      }\n\n      if (i > 0 && j > 0 && !(grid[i - 1][j].isWall && grid[i][j - 1].isWall)) {\n        this.neighbors.push(grid[i - 1][j - 1]);\n      }\n\n      if (j < cols - 1 && i < rows - 1 && grid[i + 1][j].isWall == false && grid[i][j + 1].isWall == false) {\n        this.neighbors.push(grid[i + 1][j + 1]);\n      }\n\n      if (j < cols - 1 && i > 0 && !(grid[i - 1][j].isWall && grid[i][j + 1].isWall)) {\n        this.neighbors.push(grid[i - 1][j + 1]);\n      }\n\n      if (j > 0 && i < rows - 1 && !(grid[i + 1][j].isWall && grid[i][j - 1].isWall)) {\n        this.neighbors.push(grid[i + 1][j - 1]);\n      }\n    };\n  }\n\n  const addNeighbors = grid => {\n    for (let i = 0; i < grid.length; i++) {\n      for (let j = 0; j < grid[i].length; j++) {\n        grid[i][j].addNeighbors(grid);\n      }\n    }\n  };\n\n  const [isDown, setDown] = useState(false);\n\n  const OnDown = (x, y) => {\n    if (visualizing) {\n      return;\n    }\n\n    setDown(() => true);\n    wallUp(x, y);\n  };\n\n  const OnUp = () => {\n    setDown(() => false);\n  };\n\n  const OnEnter = (x, y) => {\n    if (!isDown) {\n      return;\n    }\n\n    wallUp(x, y);\n  };\n\n  const Reset = () => {\n    if (visualizing) {\n      return;\n    }\n\n    for (let i = 0; i < Grid.length; i++) {\n      for (let j = 0; j < Grid[i].length; j++) {\n        const node = Grid[i][j];\n        node.isWall = false;\n        node.neighbors = [];\n        node.class = node.isStart ? \"node-start\" : node.isEnd ? \"node-end\" : node.isWall ? \"wall\" : \"\";\n        document.getElementById(`node-${node.x}-${node.y}`).className = `Node ${node.class}`;\n        node.f = 0;\n        node.h = 0;\n        node.g = 0;\n        node.visited = false;\n        node.neighbors = [];\n        node.previous = undefined;\n      }\n    }\n\n    visualized = false;\n    setGrid(() => Grid);\n  };\n\n  const wallUp = (x, y) => {\n    if (visualized) {\n      Reset();\n    }\n\n    let Grid1 = [...Grid];\n\n    if (!hasStart && !Grid1[x][y].isEnd) {\n      nodeStartRow = x;\n      nodeStartCol = y;\n      hasStart = true;\n      Grid1[x][y].isStart = true;\n    } else if (!hasEnd && !Grid1[x][y].isStart) {\n      nodeEndRow = x;\n      nodeEndCol = y;\n      hasEnd = true;\n      Grid1[x][y].isEnd = true;\n    } else if (Grid1[x][y].isEnd || Grid1[x][y].isStart || Grid1[x][y].isWall) {\n      if (Grid1[x][y].isEnd) {\n        nodeEndRow = null;\n        nodeEndCol = null;\n        hasEnd = false;\n        Grid1[x][y].isEnd = false;\n      }\n\n      if (Grid1[x][y].isStart) {\n        nodeStartRow = null;\n        nodeStartCol = null;\n        hasStart = false;\n        Grid1[x][y].isStart = false;\n      }\n\n      if (Grid1[x][y].isWall) {\n        Grid1[x][y].isWall = false;\n      }\n    } else {\n      Grid1[x][y].isWall = true;\n    }\n\n    setGrid(() => Grid1);\n  };\n\n  const gridwithNode = /*#__PURE__*/_jsxDEV(\"div\", {\n    children: Grid.map((row, rowIndex) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rowWrapper\",\n        children: row.map((col, colIndex) => {\n          const {\n            isStart,\n            isEnd,\n            isWall\n          } = col;\n          return /*#__PURE__*/_jsxDEV(Node, {\n            isStart: isStart,\n            isEnd: isEnd,\n            row: rowIndex,\n            col: colIndex,\n            OnEnter: OnEnter,\n            OnDown: OnDown,\n            isWall: isWall,\n            OnUp: OnUp\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 17\n          }, this);\n        })\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 245,\n    columnNumber: 5\n  }, this);\n\n  const shortestPath = (shortestPathNodes, startNode, endNode) => {\n    for (let i = 0; i < shortestPathNodes.length; i++) {\n      setTimeout(() => {\n        const node = shortestPathNodes[i];\n\n        if (node !== startNode && node !== endNode) {\n          document.getElementById(`node-${node.x}-${node.y}`).className = \"Node node-shortest\";\n        }\n      }, 5 * i);\n    }\n  };\n\n  function visualizePath() {\n    if (!hasStart || !hasEnd) {\n      return;\n    }\n\n    if (visualized) {\n      Reset();\n      return;\n    }\n\n    addNeighbors(Grid);\n    setGrid(() => Grid);\n    const startNode = Grid[nodeStartRow][nodeStartCol];\n    const endNode = Grid[nodeEndRow][nodeEndCol];\n    let path = dijkstra(startNode, endNode);\n    let Path = path.path;\n    let Visited = path.visitedNodes;\n    visualizing = true;\n\n    for (let i = 0; i <= Visited.length; i++) {\n      if (i === Visited.length) {\n        setTimeout(() => {\n          shortestPath(Path, startNode, endNode);\n          visualizing = false;\n        }, 16 * i);\n      } else {\n        setTimeout(() => {\n          const node = Visited[i];\n\n          if (node !== startNode && node !== endNode) {\n            document.getElementById(`node-${node.x}-${node.y}`).className = \"Node node-visited\";\n          }\n        }, 15 * i);\n      }\n    }\n\n    visualized = true;\n  }\n\n  const randomWalls = () => {\n    if (visualizing) {\n      return;\n    }\n\n    Reset();\n\n    for (let i = 0; i < Grid.length; i++) {\n      for (let j = 0; j < Grid[i].length; j++) {\n        if (Grid[i][j].isEnd || Grid[i][j].isStart) {} else if (Math.random(1) < 0.2) {\n          Grid[i][j].isWall = true;\n          document.getElementById(`node-${i}-${j}`).className = \"Node wall\";\n        } else {\n          Grid[i][j].isWall = false;\n        }\n      }\n    }\n\n    setGrid(() => Grid);\n  };\n\n  function generateMaze() {\n    if (!hasStart || !hasEnd || visualizing) {\n      return;\n    }\n\n    setGrid(() => Rmaze(Grid));\n    visualizing = true;\n\n    for (let i = 0; i < Grid.length; i++) {\n      setTimeout(() => {\n        for (let j = 0; j < Grid[i].length; j++) {\n          setTimeout(() => {\n            const node = Grid[i][j];\n\n            if (!node.isStart && !node.IsEnd && node.isWall) {\n              document.getElementById(`node-${node.x}-${node.y}`).className = \"Node wall\";\n            } else if (!node.isStart && !node.isEnd && !node.isWall) {\n              document.getElementById(`node-${node.x}-${node.y}`).className = \"Node\";\n            }\n\n            if (j == Grid[i].length - 1 && i == Grid.length - 1) {\n              visualizing = false;\n            }\n          }, 0 * j);\n        }\n      }, 0 * i);\n    }\n\n    visualized = false;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title\",\n        children: \"Pathfinding Visualizer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"click and drag to create walls - replace start and end nodes with click\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-sm\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: visualizePath,\n          children: \"Vizualize Path (A*)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-sm\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: randomWalls,\n          children: \"Random Walls\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-sm\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: Reset,\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-sm\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: generateMaze,\n          children: \"Generate Maze (Prim's Algorithm)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 7\n    }, this), gridwithNode]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 375,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Pathfind, \"RXhbP9sAU71I2ann3oyK7wR/e6Q=\");\n\n_c = Pathfind;\nexport default Pathfind;\n\nvar _c;\n\n$RefreshReg$(_c, \"Pathfind\");","map":{"version":3,"sources":["E:/CS Projects/visualizer/src/Components/pathfind.js"],"names":["React","useState","useEffect","Node","dijkstra","Rmaze","makeRows","x","Math","round","window","innerHeight","makecols","innerWidth","rows","cols","hasStart","hasEnd","nodeStartRow","nodeStartCol","nodeEndRow","nodeEndCol","visualized","visualizing","Pathfind","Grid","setGrid","initializeGrid","createSpot","i","j","Spot","Grid1","Array","y","f","h","g","mazeStatus","undefined","wallNeighbors","isWall","connections","addWallNeighbors","grid","push","visited","isStart","isEnd","neighbors","previous","addNeighbors","length","isDown","setDown","OnDown","wallUp","OnUp","OnEnter","Reset","node","class","document","getElementById","className","gridwithNode","map","row","rowIndex","col","colIndex","shortestPath","shortestPathNodes","startNode","endNode","setTimeout","visualizePath","path","Path","Visited","visitedNodes","randomWalls","random","generateMaze","IsEnd"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAO,gBAAP;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,KAAP,MAAkB,kCAAlB;;;AAEA,SAASC,QAAT,GAAoB;AAClB,MAAIC,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACC,WAAP,GAAqB,EAAhC,CAAR;;AACA,MAAIJ,CAAC,GAAG,CAAJ,IAAS,CAAb,EAAgB;AACd,WAAOA,CAAC,GAAG,CAAX;AACD,GAFD,MAEO;AACL,WAAOA,CAAP;AACD;AACF;;AACD,SAASK,QAAT,GAAoB;AAClB,MAAIL,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACG,UAAP,GAAoB,EAA/B,CAAR;;AACA,MAAIN,CAAC,GAAG,CAAJ,IAAS,CAAb,EAAgB;AACd,WAAOA,CAAC,GAAG,CAAX;AACD,GAFD,MAEO;AACL,WAAOA,CAAP;AACD;AACF;;AACD,MAAMO,IAAI,GAAGR,QAAQ,EAArB;AACA,MAAMS,IAAI,GAAGH,QAAQ,EAArB;AAEA,IAAII,QAAQ,GAAG,IAAf;AACA,IAAIC,MAAM,GAAG,IAAb;AACA,IAAIC,YAAY,GAAG,CAAnB;AACA,IAAIC,YAAY,GAAG,CAAnB;AACA,IAAIC,UAAU,GAAGN,IAAI,GAAG,CAAxB;AACA,IAAIO,UAAU,GAAGN,IAAI,GAAG,CAAxB;AACA,IAAIO,UAAU,GAAG,KAAjB;AACA,IAAIC,WAAW,GAAG,KAAlB;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACrB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBzB,QAAQ,CAAC,EAAD,CAAhC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdyB,IAAAA,cAAc;AACf,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMC,UAAU,GAAIH,IAAD,IAAU;AAC3B,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGf,IAApB,EAA0Be,CAAC,EAA3B,EAA+B;AAC7B,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGf,IAApB,EAA0Be,CAAC,EAA3B,EAA+B;AAC7BL,QAAAA,IAAI,CAACI,CAAD,CAAJ,CAAQC,CAAR,IAAa,IAAIC,IAAJ,CAASF,CAAT,EAAYC,CAAZ,CAAb;AACD;AACF;AACF,GAND;;AAQA,QAAMH,cAAc,GAAG,MAAM;AAC3B,UAAMK,KAAK,GAAG,IAAIC,KAAJ,CAAUnB,IAAV,CAAd;;AAEA,SAAK,IAAIe,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGf,IAApB,EAA0Be,CAAC,EAA3B,EAA+B;AAC7BG,MAAAA,KAAK,CAACH,CAAD,CAAL,GAAW,IAAII,KAAJ,CAAUlB,IAAV,CAAX;AACD;;AACDa,IAAAA,UAAU,CAACI,KAAD,CAAV;AAEAN,IAAAA,OAAO,CAAC,MAAMM,KAAP,CAAP;AACD,GATD;;AAWA,WAASD,IAAT,CAAcF,CAAd,EAAiBC,CAAjB,EAAoB;AAClB,SAAKvB,CAAL,GAASsB,CAAT;AACA,SAAKK,CAAL,GAASJ,CAAT;AACA,SAAKK,CAAL,GAAS,CAAT;AACA,SAAKC,CAAL,GAAS,CAAT;AACA,SAAKC,CAAL,GAAS,CAAT;AACA,SAAKC,UAAL,GAAkBC,SAAlB;AACA,SAAKC,aAAL,GAAqB,EAArB;AACA,SAAKC,MAAL,GAAc,KAAd;AACA,SAAKC,WAAL,GAAmB,EAAnB;;AACA,SAAKC,gBAAL,GAAwB,UAAUC,IAAV,EAAgB;AACtC,UAAIf,CAAC,GAAG,KAAKtB,CAAb;AACA,UAAIuB,CAAC,GAAG,KAAKI,CAAb;;AAEA,UAAIL,CAAC,GAAG,CAAR,EAAW;AACT,aAAKW,aAAL,CAAmBK,IAAnB,CAAwBD,IAAI,CAACf,CAAC,GAAG,CAAL,CAAJ,CAAYC,CAAZ,CAAxB;AACD;;AACD,UAAID,CAAC,GAAGf,IAAI,GAAG,CAAf,EAAkB;AAChB,aAAK0B,aAAL,CAAmBK,IAAnB,CAAwBD,IAAI,CAACf,CAAC,GAAG,CAAL,CAAJ,CAAYC,CAAZ,CAAxB;AACD;;AACD,UAAIA,CAAC,GAAG,CAAR,EAAW;AACT,aAAKU,aAAL,CAAmBK,IAAnB,CAAwBD,IAAI,CAACf,CAAD,CAAJ,CAAQC,CAAC,GAAG,CAAZ,CAAxB;AACD;;AACD,UAAIA,CAAC,GAAGf,IAAI,GAAG,CAAf,EAAkB;AAChB,aAAKyB,aAAL,CAAmBK,IAAnB,CAAwBD,IAAI,CAACf,CAAD,CAAJ,CAAQC,CAAC,GAAG,CAAZ,CAAxB;AACD;AACF,KAhBD;;AAkBA,SAAKgB,OAAL,GAAe,KAAf;AACA,SAAKC,OAAL,GAAe,KAAKxC,CAAL,KAAWW,YAAX,IAA2B,KAAKgB,CAAL,KAAWf,YAArD;AACA,SAAK6B,KAAL,GAAa,KAAKzC,CAAL,KAAWa,UAAX,IAAyB,KAAKc,CAAL,KAAWb,UAAjD;AACA,SAAK4B,SAAL,GAAiB,EAAjB;AACA,SAAKC,QAAL,GAAgBX,SAAhB;;AACA,SAAKY,YAAL,GAAoB,UAAUP,IAAV,EAAgB;AAClC,UAAIf,CAAC,GAAG,KAAKtB,CAAb;AACA,UAAIuB,CAAC,GAAG,KAAKI,CAAb;AACA,UAAIpB,IAAI,GAAG8B,IAAI,CAACQ,MAAhB;AACA,UAAIrC,IAAI,GAAG6B,IAAI,CAAC,CAAD,CAAJ,CAAQQ,MAAnB;;AAEA,UAAIvB,CAAC,GAAG,CAAR,EAAW;AACT,aAAKoB,SAAL,CAAeJ,IAAf,CAAoBD,IAAI,CAACf,CAAC,GAAG,CAAL,CAAJ,CAAYC,CAAZ,CAApB;AACD;;AACD,UAAID,CAAC,GAAGf,IAAI,GAAG,CAAf,EAAkB;AAChB,aAAKmC,SAAL,CAAeJ,IAAf,CAAoBD,IAAI,CAACf,CAAC,GAAG,CAAL,CAAJ,CAAYC,CAAZ,CAApB;AACD;;AACD,UAAIA,CAAC,GAAG,CAAR,EAAW;AACT,aAAKmB,SAAL,CAAeJ,IAAf,CAAoBD,IAAI,CAACf,CAAD,CAAJ,CAAQC,CAAC,GAAG,CAAZ,CAApB;AACD;;AACD,UAAIA,CAAC,GAAGf,IAAI,GAAG,CAAf,EAAkB;AAChB,aAAKkC,SAAL,CAAeJ,IAAf,CAAoBD,IAAI,CAACf,CAAD,CAAJ,CAAQC,CAAC,GAAG,CAAZ,CAApB;AACD;;AAED,UAAID,CAAC,GAAG,CAAJ,IAASC,CAAC,GAAG,CAAb,IAAkB,EAAEc,IAAI,CAACf,CAAC,GAAG,CAAL,CAAJ,CAAYC,CAAZ,EAAeW,MAAf,IAAyBG,IAAI,CAACf,CAAD,CAAJ,CAAQC,CAAC,GAAG,CAAZ,EAAeW,MAA1C,CAAtB,EAAyE;AACvE,aAAKQ,SAAL,CAAeJ,IAAf,CAAoBD,IAAI,CAACf,CAAC,GAAG,CAAL,CAAJ,CAAYC,CAAC,GAAG,CAAhB,CAApB;AACD;;AACD,UACEA,CAAC,GAAGf,IAAI,GAAG,CAAX,IACAc,CAAC,GAAGf,IAAI,GAAG,CADX,IAEA8B,IAAI,CAACf,CAAC,GAAG,CAAL,CAAJ,CAAYC,CAAZ,EAAeW,MAAf,IAAyB,KAFzB,IAGAG,IAAI,CAACf,CAAD,CAAJ,CAAQC,CAAC,GAAG,CAAZ,EAAeW,MAAf,IAAyB,KAJ3B,EAKE;AACA,aAAKQ,SAAL,CAAeJ,IAAf,CAAoBD,IAAI,CAACf,CAAC,GAAG,CAAL,CAAJ,CAAYC,CAAC,GAAG,CAAhB,CAApB;AACD;;AAED,UACEA,CAAC,GAAGf,IAAI,GAAG,CAAX,IACAc,CAAC,GAAG,CADJ,IAEA,EAAEe,IAAI,CAACf,CAAC,GAAG,CAAL,CAAJ,CAAYC,CAAZ,EAAeW,MAAf,IAAyBG,IAAI,CAACf,CAAD,CAAJ,CAAQC,CAAC,GAAG,CAAZ,EAAeW,MAA1C,CAHF,EAIE;AACA,aAAKQ,SAAL,CAAeJ,IAAf,CAAoBD,IAAI,CAACf,CAAC,GAAG,CAAL,CAAJ,CAAYC,CAAC,GAAG,CAAhB,CAApB;AACD;;AAED,UACEA,CAAC,GAAG,CAAJ,IACAD,CAAC,GAAGf,IAAI,GAAG,CADX,IAEA,EAAE8B,IAAI,CAACf,CAAC,GAAG,CAAL,CAAJ,CAAYC,CAAZ,EAAeW,MAAf,IAAyBG,IAAI,CAACf,CAAD,CAAJ,CAAQC,CAAC,GAAG,CAAZ,EAAeW,MAA1C,CAHF,EAIE;AACA,aAAKQ,SAAL,CAAeJ,IAAf,CAAoBD,IAAI,CAACf,CAAC,GAAG,CAAL,CAAJ,CAAYC,CAAC,GAAG,CAAhB,CAApB;AACD;AACF,KA9CD;AA+CD;;AAED,QAAMqB,YAAY,GAAIP,IAAD,IAAU;AAC7B,SAAK,IAAIf,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGe,IAAI,CAACQ,MAAzB,EAAiCvB,CAAC,EAAlC,EAAsC;AACpC,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGc,IAAI,CAACf,CAAD,CAAJ,CAAQuB,MAA5B,EAAoCtB,CAAC,EAArC,EAAyC;AACvCc,QAAAA,IAAI,CAACf,CAAD,CAAJ,CAAQC,CAAR,EAAWqB,YAAX,CAAwBP,IAAxB;AACD;AACF;AACF,GAND;;AAQA,QAAM,CAACS,MAAD,EAASC,OAAT,IAAoBrD,QAAQ,CAAC,KAAD,CAAlC;;AAEA,QAAMsD,MAAM,GAAG,CAAChD,CAAD,EAAI2B,CAAJ,KAAU;AACvB,QAAIX,WAAJ,EAAiB;AACf;AACD;;AACD+B,IAAAA,OAAO,CAAC,MAAM,IAAP,CAAP;AACAE,IAAAA,MAAM,CAACjD,CAAD,EAAI2B,CAAJ,CAAN;AACD,GAND;;AAQA,QAAMuB,IAAI,GAAG,MAAM;AACjBH,IAAAA,OAAO,CAAC,MAAM,KAAP,CAAP;AACD,GAFD;;AAIA,QAAMI,OAAO,GAAG,CAACnD,CAAD,EAAI2B,CAAJ,KAAU;AACxB,QAAI,CAACmB,MAAL,EAAa;AACX;AACD;;AAEDG,IAAAA,MAAM,CAACjD,CAAD,EAAI2B,CAAJ,CAAN;AACD,GAND;;AAQA,QAAMyB,KAAK,GAAG,MAAM;AAClB,QAAIpC,WAAJ,EAAiB;AACf;AACD;;AAED,SAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,IAAI,CAAC2B,MAAzB,EAAiCvB,CAAC,EAAlC,EAAsC;AACpC,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,IAAI,CAACI,CAAD,CAAJ,CAAQuB,MAA5B,EAAoCtB,CAAC,EAArC,EAAyC;AACvC,cAAM8B,IAAI,GAAGnC,IAAI,CAACI,CAAD,CAAJ,CAAQC,CAAR,CAAb;AACA8B,QAAAA,IAAI,CAACnB,MAAL,GAAc,KAAd;AACAmB,QAAAA,IAAI,CAACX,SAAL,GAAiB,EAAjB;AACAW,QAAAA,IAAI,CAACC,KAAL,GAAaD,IAAI,CAACb,OAAL,GACT,YADS,GAETa,IAAI,CAACZ,KAAL,GACA,UADA,GAEAY,IAAI,CAACnB,MAAL,GACA,MADA,GAEA,EANJ;AAOAqB,QAAAA,QAAQ,CAACC,cAAT,CACG,QAAOH,IAAI,CAACrD,CAAE,IAAGqD,IAAI,CAAC1B,CAAE,EAD3B,EAEE8B,SAFF,GAEe,QAAOJ,IAAI,CAACC,KAAM,EAFjC;AAGAD,QAAAA,IAAI,CAACzB,CAAL,GAAS,CAAT;AACAyB,QAAAA,IAAI,CAACxB,CAAL,GAAS,CAAT;AACAwB,QAAAA,IAAI,CAACvB,CAAL,GAAS,CAAT;AACAuB,QAAAA,IAAI,CAACd,OAAL,GAAe,KAAf;AACAc,QAAAA,IAAI,CAACX,SAAL,GAAiB,EAAjB;AACAW,QAAAA,IAAI,CAACV,QAAL,GAAgBX,SAAhB;AACD;AACF;;AAEDjB,IAAAA,UAAU,GAAG,KAAb;AACAI,IAAAA,OAAO,CAAC,MAAMD,IAAP,CAAP;AACD,GA/BD;;AAgCA,QAAM+B,MAAM,GAAG,CAACjD,CAAD,EAAI2B,CAAJ,KAAU;AACvB,QAAIZ,UAAJ,EAAgB;AACdqC,MAAAA,KAAK;AACN;;AACD,QAAI3B,KAAK,GAAG,CAAC,GAAGP,IAAJ,CAAZ;;AAEA,QAAI,CAACT,QAAD,IAAa,CAACgB,KAAK,CAACzB,CAAD,CAAL,CAAS2B,CAAT,EAAYc,KAA9B,EAAqC;AACnC9B,MAAAA,YAAY,GAAGX,CAAf;AACAY,MAAAA,YAAY,GAAGe,CAAf;AACAlB,MAAAA,QAAQ,GAAG,IAAX;AACAgB,MAAAA,KAAK,CAACzB,CAAD,CAAL,CAAS2B,CAAT,EAAYa,OAAZ,GAAsB,IAAtB;AACD,KALD,MAKO,IAAI,CAAC9B,MAAD,IAAW,CAACe,KAAK,CAACzB,CAAD,CAAL,CAAS2B,CAAT,EAAYa,OAA5B,EAAqC;AAC1C3B,MAAAA,UAAU,GAAGb,CAAb;AACAc,MAAAA,UAAU,GAAGa,CAAb;AACAjB,MAAAA,MAAM,GAAG,IAAT;AACAe,MAAAA,KAAK,CAACzB,CAAD,CAAL,CAAS2B,CAAT,EAAYc,KAAZ,GAAoB,IAApB;AACD,KALM,MAKA,IAAIhB,KAAK,CAACzB,CAAD,CAAL,CAAS2B,CAAT,EAAYc,KAAZ,IAAqBhB,KAAK,CAACzB,CAAD,CAAL,CAAS2B,CAAT,EAAYa,OAAjC,IAA4Cf,KAAK,CAACzB,CAAD,CAAL,CAAS2B,CAAT,EAAYO,MAA5D,EAAoE;AACzE,UAAIT,KAAK,CAACzB,CAAD,CAAL,CAAS2B,CAAT,EAAYc,KAAhB,EAAuB;AACrB5B,QAAAA,UAAU,GAAG,IAAb;AACAC,QAAAA,UAAU,GAAG,IAAb;AACAJ,QAAAA,MAAM,GAAG,KAAT;AACAe,QAAAA,KAAK,CAACzB,CAAD,CAAL,CAAS2B,CAAT,EAAYc,KAAZ,GAAoB,KAApB;AACD;;AACD,UAAIhB,KAAK,CAACzB,CAAD,CAAL,CAAS2B,CAAT,EAAYa,OAAhB,EAAyB;AACvB7B,QAAAA,YAAY,GAAG,IAAf;AACAC,QAAAA,YAAY,GAAG,IAAf;AACAH,QAAAA,QAAQ,GAAG,KAAX;AACAgB,QAAAA,KAAK,CAACzB,CAAD,CAAL,CAAS2B,CAAT,EAAYa,OAAZ,GAAsB,KAAtB;AACD;;AACD,UAAIf,KAAK,CAACzB,CAAD,CAAL,CAAS2B,CAAT,EAAYO,MAAhB,EAAwB;AACtBT,QAAAA,KAAK,CAACzB,CAAD,CAAL,CAAS2B,CAAT,EAAYO,MAAZ,GAAqB,KAArB;AACD;AACF,KAhBM,MAgBA;AACLT,MAAAA,KAAK,CAACzB,CAAD,CAAL,CAAS2B,CAAT,EAAYO,MAAZ,GAAqB,IAArB;AACD;;AAEDf,IAAAA,OAAO,CAAC,MAAMM,KAAP,CAAP;AACD,GArCD;;AAuCA,QAAMiC,YAAY,gBAChB;AAAA,cACGxC,IAAI,CAACyC,GAAL,CAAS,CAACC,GAAD,EAAMC,QAAN,KAAmB;AAC3B,0BACE;AAAoB,QAAA,SAAS,EAAC,YAA9B;AAAA,kBACGD,GAAG,CAACD,GAAJ,CAAQ,CAACG,GAAD,EAAMC,QAAN,KAAmB;AAC1B,gBAAM;AAAEvB,YAAAA,OAAF;AAAWC,YAAAA,KAAX;AAAkBP,YAAAA;AAAlB,cAA6B4B,GAAnC;AACA,8BACE,QAAC,IAAD;AAEE,YAAA,OAAO,EAAEtB,OAFX;AAGE,YAAA,KAAK,EAAEC,KAHT;AAIE,YAAA,GAAG,EAAEoB,QAJP;AAKE,YAAA,GAAG,EAAEE,QALP;AAME,YAAA,OAAO,EAAEZ,OANX;AAOE,YAAA,MAAM,EAAEH,MAPV;AAQE,YAAA,MAAM,EAAEd,MARV;AASE,YAAA,IAAI,EAAEgB;AATR,aACOa,QADP;AAAA;AAAA;AAAA;AAAA,kBADF;AAaD,SAfA;AADH,SAAUF,QAAV;AAAA;AAAA;AAAA;AAAA,cADF;AAoBD,KArBA;AADH;AAAA;AAAA;AAAA;AAAA,UADF;;AA2BA,QAAMG,YAAY,GAAG,CAACC,iBAAD,EAAoBC,SAApB,EAA+BC,OAA/B,KAA2C;AAC9D,SAAK,IAAI7C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG2C,iBAAiB,CAACpB,MAAtC,EAA8CvB,CAAC,EAA/C,EAAmD;AACjD8C,MAAAA,UAAU,CAAC,MAAM;AACf,cAAMf,IAAI,GAAGY,iBAAiB,CAAC3C,CAAD,CAA9B;;AACA,YAAI+B,IAAI,KAAKa,SAAT,IAAsBb,IAAI,KAAKc,OAAnC,EAA4C;AAC1CZ,UAAAA,QAAQ,CAACC,cAAT,CAAyB,QAAOH,IAAI,CAACrD,CAAE,IAAGqD,IAAI,CAAC1B,CAAE,EAAjD,EAAoD8B,SAApD,GACE,oBADF;AAED;AACF,OANS,EAMP,IAAInC,CANG,CAAV;AAOD;AACF,GAVD;;AAYA,WAAS+C,aAAT,GAAyB;AACvB,QAAI,CAAC5D,QAAD,IAAa,CAACC,MAAlB,EAA0B;AACxB;AACD;;AACD,QAAIK,UAAJ,EAAgB;AACdqC,MAAAA,KAAK;AACL;AACD;;AACDR,IAAAA,YAAY,CAAC1B,IAAD,CAAZ;AACAC,IAAAA,OAAO,CAAC,MAAMD,IAAP,CAAP;AAEA,UAAMgD,SAAS,GAAGhD,IAAI,CAACP,YAAD,CAAJ,CAAmBC,YAAnB,CAAlB;AACA,UAAMuD,OAAO,GAAGjD,IAAI,CAACL,UAAD,CAAJ,CAAiBC,UAAjB,CAAhB;AAEA,QAAIwD,IAAI,GAAGzE,QAAQ,CAACqE,SAAD,EAAYC,OAAZ,CAAnB;AAEA,QAAII,IAAI,GAAGD,IAAI,CAACA,IAAhB;AAEA,QAAIE,OAAO,GAAGF,IAAI,CAACG,YAAnB;AAEAzD,IAAAA,WAAW,GAAG,IAAd;;AAEA,SAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIkD,OAAO,CAAC3B,MAA7B,EAAqCvB,CAAC,EAAtC,EAA0C;AACxC,UAAIA,CAAC,KAAKkD,OAAO,CAAC3B,MAAlB,EAA0B;AACxBuB,QAAAA,UAAU,CAAC,MAAM;AACfJ,UAAAA,YAAY,CAACO,IAAD,EAAOL,SAAP,EAAkBC,OAAlB,CAAZ;AACAnD,UAAAA,WAAW,GAAG,KAAd;AACD,SAHS,EAGP,KAAKM,CAHE,CAAV;AAID,OALD,MAKO;AACL8C,QAAAA,UAAU,CAAC,MAAM;AACf,gBAAMf,IAAI,GAAGmB,OAAO,CAAClD,CAAD,CAApB;;AACA,cAAI+B,IAAI,KAAKa,SAAT,IAAsBb,IAAI,KAAKc,OAAnC,EAA4C;AAC1CZ,YAAAA,QAAQ,CAACC,cAAT,CAAyB,QAAOH,IAAI,CAACrD,CAAE,IAAGqD,IAAI,CAAC1B,CAAE,EAAjD,EAAoD8B,SAApD,GACE,mBADF;AAED;AACF,SANS,EAMP,KAAKnC,CANE,CAAV;AAOD;AACF;;AACDP,IAAAA,UAAU,GAAG,IAAb;AACD;;AAED,QAAM2D,WAAW,GAAG,MAAM;AACxB,QAAI1D,WAAJ,EAAiB;AACf;AACD;;AAEDoC,IAAAA,KAAK;;AAEL,SAAK,IAAI9B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,IAAI,CAAC2B,MAAzB,EAAiCvB,CAAC,EAAlC,EAAsC;AACpC,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,IAAI,CAACI,CAAD,CAAJ,CAAQuB,MAA5B,EAAoCtB,CAAC,EAArC,EAAyC;AACvC,YAAIL,IAAI,CAACI,CAAD,CAAJ,CAAQC,CAAR,EAAWkB,KAAX,IAAoBvB,IAAI,CAACI,CAAD,CAAJ,CAAQC,CAAR,EAAWiB,OAAnC,EAA4C,CAC3C,CADD,MACO,IAAIvC,IAAI,CAAC0E,MAAL,CAAY,CAAZ,IAAiB,GAArB,EAA0B;AAC/BzD,UAAAA,IAAI,CAACI,CAAD,CAAJ,CAAQC,CAAR,EAAWW,MAAX,GAAoB,IAApB;AACAqB,UAAAA,QAAQ,CAACC,cAAT,CAAyB,QAAOlC,CAAE,IAAGC,CAAE,EAAvC,EAA0CkC,SAA1C,GAAsD,WAAtD;AACD,SAHM,MAGA;AACLvC,UAAAA,IAAI,CAACI,CAAD,CAAJ,CAAQC,CAAR,EAAWW,MAAX,GAAoB,KAApB;AACD;AACF;AACF;;AAEDf,IAAAA,OAAO,CAAC,MAAMD,IAAP,CAAP;AACD,GApBD;;AAsBA,WAAS0D,YAAT,GAAwB;AACtB,QAAI,CAACnE,QAAD,IAAa,CAACC,MAAd,IAAwBM,WAA5B,EAAyC;AACvC;AACD;;AAEDG,IAAAA,OAAO,CAAC,MAAMrB,KAAK,CAACoB,IAAD,CAAZ,CAAP;AACAF,IAAAA,WAAW,GAAG,IAAd;;AACA,SAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,IAAI,CAAC2B,MAAzB,EAAiCvB,CAAC,EAAlC,EAAsC;AACpC8C,MAAAA,UAAU,CAAC,MAAM;AACf,aAAK,IAAI7C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,IAAI,CAACI,CAAD,CAAJ,CAAQuB,MAA5B,EAAoCtB,CAAC,EAArC,EAAyC;AACvC6C,UAAAA,UAAU,CAAC,MAAM;AACf,kBAAMf,IAAI,GAAGnC,IAAI,CAACI,CAAD,CAAJ,CAAQC,CAAR,CAAb;;AACA,gBAAI,CAAC8B,IAAI,CAACb,OAAN,IAAiB,CAACa,IAAI,CAACwB,KAAvB,IAAgCxB,IAAI,CAACnB,MAAzC,EAAiD;AAC/CqB,cAAAA,QAAQ,CAACC,cAAT,CAAyB,QAAOH,IAAI,CAACrD,CAAE,IAAGqD,IAAI,CAAC1B,CAAE,EAAjD,EAAoD8B,SAApD,GACE,WADF;AAED,aAHD,MAGO,IAAI,CAACJ,IAAI,CAACb,OAAN,IAAiB,CAACa,IAAI,CAACZ,KAAvB,IAAgC,CAACY,IAAI,CAACnB,MAA1C,EAAkD;AACvDqB,cAAAA,QAAQ,CAACC,cAAT,CAAyB,QAAOH,IAAI,CAACrD,CAAE,IAAGqD,IAAI,CAAC1B,CAAE,EAAjD,EAAoD8B,SAApD,GACE,MADF;AAED;;AACD,gBAAIlC,CAAC,IAAIL,IAAI,CAACI,CAAD,CAAJ,CAAQuB,MAAR,GAAiB,CAAtB,IAA2BvB,CAAC,IAAIJ,IAAI,CAAC2B,MAAL,GAAc,CAAlD,EAAqD;AACnD7B,cAAAA,WAAW,GAAG,KAAd;AACD;AACF,WAZS,EAYP,IAAIO,CAZG,CAAV;AAaD;AACF,OAhBS,EAgBP,IAAID,CAhBG,CAAV;AAiBD;;AACDP,IAAAA,UAAU,GAAG,KAAb;AACD;;AACD,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,6BACE;AAAI,QAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAJF,eAUE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA,+BACE;AAAQ,UAAA,OAAO,EAAEsD,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAKE;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA,+BACE;AAAQ,UAAA,OAAO,EAAEK,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cALF,eAQE;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA,+BACE;AAAQ,UAAA,OAAO,EAAEtB,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cARF,eAWE;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA,+BACE;AAAQ,UAAA,OAAO,EAAEwB,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAXF;AAAA;AAAA;AAAA;AAAA;AAAA,YAVF,EA4BGlB,YA5BH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgCD,CAnXD;;GAAMzC,Q;;KAAAA,Q;AAoXN,eAAeA,QAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Node from \"./Node.js\";\r\nimport \"./Pathfind.css\";\r\nimport dijkstra from \"../Algorithms/dijkstras.js\";\r\nimport Rmaze from \"../Algorithms/Prims Algorithm.js\";\r\n\r\nfunction makeRows() {\r\n  let x = Math.round(window.innerHeight / 35);\r\n  if (x % 2 == 0) {\r\n    return x - 1;\r\n  } else {\r\n    return x;\r\n  }\r\n}\r\nfunction makecols() {\r\n  let x = Math.round(window.innerWidth / 28);\r\n  if (x % 2 == 0) {\r\n    return x - 1;\r\n  } else {\r\n    return x;\r\n  }\r\n}\r\nconst rows = makeRows();\r\nconst cols = makecols();\r\n\r\nlet hasStart = true;\r\nlet hasEnd = true;\r\nlet nodeStartRow = 2;\r\nlet nodeStartCol = 2;\r\nlet nodeEndRow = rows - 3;\r\nlet nodeEndCol = cols - 3;\r\nlet visualized = false;\r\nlet visualizing = false;\r\n\r\nconst Pathfind = () => {\r\n  const [Grid, setGrid] = useState([]);\r\n\r\n  useEffect(() => {\r\n    initializeGrid();\r\n  }, []);\r\n\r\n  const createSpot = (Grid) => {\r\n    for (let i = 0; i < rows; i++) {\r\n      for (let j = 0; j < cols; j++) {\r\n        Grid[i][j] = new Spot(i, j);\r\n      }\r\n    }\r\n  };\r\n\r\n  const initializeGrid = () => {\r\n    const Grid1 = new Array(rows);\r\n\r\n    for (let i = 0; i < rows; i++) {\r\n      Grid1[i] = new Array(cols);\r\n    }\r\n    createSpot(Grid1);\r\n\r\n    setGrid(() => Grid1);\r\n  };\r\n\r\n  function Spot(i, j) {\r\n    this.x = i;\r\n    this.y = j;\r\n    this.f = 0;\r\n    this.h = 0;\r\n    this.g = 0;\r\n    this.mazeStatus = undefined;\r\n    this.wallNeighbors = [];\r\n    this.isWall = false;\r\n    this.connections = [];\r\n    this.addWallNeighbors = function (grid) {\r\n      let i = this.x;\r\n      let j = this.y;\r\n\r\n      if (i > 1) {\r\n        this.wallNeighbors.push(grid[i - 2][j]);\r\n      }\r\n      if (i < rows - 2) {\r\n        this.wallNeighbors.push(grid[i + 2][j]);\r\n      }\r\n      if (j > 1) {\r\n        this.wallNeighbors.push(grid[i][j - 2]);\r\n      }\r\n      if (j < cols - 2) {\r\n        this.wallNeighbors.push(grid[i][j + 2]);\r\n      }\r\n    };\r\n\r\n    this.visited = false;\r\n    this.isStart = this.x === nodeStartRow && this.y === nodeStartCol;\r\n    this.isEnd = this.x === nodeEndRow && this.y === nodeEndCol;\r\n    this.neighbors = [];\r\n    this.previous = undefined;\r\n    this.addNeighbors = function (grid) {\r\n      let i = this.x;\r\n      let j = this.y;\r\n      let rows = grid.length;\r\n      let cols = grid[1].length;\r\n\r\n      if (i > 0) {\r\n        this.neighbors.push(grid[i - 1][j]);\r\n      }\r\n      if (i < rows - 1) {\r\n        this.neighbors.push(grid[i + 1][j]);\r\n      }\r\n      if (j > 0) {\r\n        this.neighbors.push(grid[i][j - 1]);\r\n      }\r\n      if (j < cols - 1) {\r\n        this.neighbors.push(grid[i][j + 1]);\r\n      }\r\n\r\n      if (i > 0 && j > 0 && !(grid[i - 1][j].isWall && grid[i][j - 1].isWall)) {\r\n        this.neighbors.push(grid[i - 1][j - 1]);\r\n      }\r\n      if (\r\n        j < cols - 1 &&\r\n        i < rows - 1 &&\r\n        grid[i + 1][j].isWall == false &&\r\n        grid[i][j + 1].isWall == false\r\n      ) {\r\n        this.neighbors.push(grid[i + 1][j + 1]);\r\n      }\r\n\r\n      if (\r\n        j < cols - 1 &&\r\n        i > 0 &&\r\n        !(grid[i - 1][j].isWall && grid[i][j + 1].isWall)\r\n      ) {\r\n        this.neighbors.push(grid[i - 1][j + 1]);\r\n      }\r\n\r\n      if (\r\n        j > 0 &&\r\n        i < rows - 1 &&\r\n        !(grid[i + 1][j].isWall && grid[i][j - 1].isWall)\r\n      ) {\r\n        this.neighbors.push(grid[i + 1][j - 1]);\r\n      }\r\n    };\r\n  }\r\n\r\n  const addNeighbors = (grid) => {\r\n    for (let i = 0; i < grid.length; i++) {\r\n      for (let j = 0; j < grid[i].length; j++) {\r\n        grid[i][j].addNeighbors(grid);\r\n      }\r\n    }\r\n  };\r\n\r\n  const [isDown, setDown] = useState(false);\r\n\r\n  const OnDown = (x, y) => {\r\n    if (visualizing) {\r\n      return;\r\n    }\r\n    setDown(() => true);\r\n    wallUp(x, y);\r\n  };\r\n\r\n  const OnUp = () => {\r\n    setDown(() => false);\r\n  };\r\n\r\n  const OnEnter = (x, y) => {\r\n    if (!isDown) {\r\n      return;\r\n    }\r\n\r\n    wallUp(x, y);\r\n  };\r\n\r\n  const Reset = () => {\r\n    if (visualizing) {\r\n      return;\r\n    }\r\n\r\n    for (let i = 0; i < Grid.length; i++) {\r\n      for (let j = 0; j < Grid[i].length; j++) {\r\n        const node = Grid[i][j];\r\n        node.isWall = false;\r\n        node.neighbors = [];\r\n        node.class = node.isStart\r\n          ? \"node-start\"\r\n          : node.isEnd\r\n          ? \"node-end\"\r\n          : node.isWall\r\n          ? \"wall\"\r\n          : \"\";\r\n        document.getElementById(\r\n          `node-${node.x}-${node.y}`\r\n        ).className = `Node ${node.class}`;\r\n        node.f = 0;\r\n        node.h = 0;\r\n        node.g = 0;\r\n        node.visited = false;\r\n        node.neighbors = [];\r\n        node.previous = undefined;\r\n      }\r\n    }\r\n\r\n    visualized = false;\r\n    setGrid(() => Grid);\r\n  };\r\n  const wallUp = (x, y) => {\r\n    if (visualized) {\r\n      Reset();\r\n    }\r\n    let Grid1 = [...Grid];\r\n\r\n    if (!hasStart && !Grid1[x][y].isEnd) {\r\n      nodeStartRow = x;\r\n      nodeStartCol = y;\r\n      hasStart = true;\r\n      Grid1[x][y].isStart = true;\r\n    } else if (!hasEnd && !Grid1[x][y].isStart) {\r\n      nodeEndRow = x;\r\n      nodeEndCol = y;\r\n      hasEnd = true;\r\n      Grid1[x][y].isEnd = true;\r\n    } else if (Grid1[x][y].isEnd || Grid1[x][y].isStart || Grid1[x][y].isWall) {\r\n      if (Grid1[x][y].isEnd) {\r\n        nodeEndRow = null;\r\n        nodeEndCol = null;\r\n        hasEnd = false;\r\n        Grid1[x][y].isEnd = false;\r\n      }\r\n      if (Grid1[x][y].isStart) {\r\n        nodeStartRow = null;\r\n        nodeStartCol = null;\r\n        hasStart = false;\r\n        Grid1[x][y].isStart = false;\r\n      }\r\n      if (Grid1[x][y].isWall) {\r\n        Grid1[x][y].isWall = false;\r\n      }\r\n    } else {\r\n      Grid1[x][y].isWall = true;\r\n    }\r\n\r\n    setGrid(() => Grid1);\r\n  };\r\n\r\n  const gridwithNode = (\r\n    <div>\r\n      {Grid.map((row, rowIndex) => {\r\n        return (\r\n          <div key={rowIndex} className=\"rowWrapper\">\r\n            {row.map((col, colIndex) => {\r\n              const { isStart, isEnd, isWall } = col;\r\n              return (\r\n                <Node\r\n                  key={colIndex}\r\n                  isStart={isStart}\r\n                  isEnd={isEnd}\r\n                  row={rowIndex}\r\n                  col={colIndex}\r\n                  OnEnter={OnEnter}\r\n                  OnDown={OnDown}\r\n                  isWall={isWall}\r\n                  OnUp={OnUp}\r\n                />\r\n              );\r\n            })}\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n\r\n  const shortestPath = (shortestPathNodes, startNode, endNode) => {\r\n    for (let i = 0; i < shortestPathNodes.length; i++) {\r\n      setTimeout(() => {\r\n        const node = shortestPathNodes[i];\r\n        if (node !== startNode && node !== endNode) {\r\n          document.getElementById(`node-${node.x}-${node.y}`).className =\r\n            \"Node node-shortest\";\r\n        }\r\n      }, 5 * i);\r\n    }\r\n  };\r\n\r\n  function visualizePath() {\r\n    if (!hasStart || !hasEnd) {\r\n      return;\r\n    }\r\n    if (visualized) {\r\n      Reset();\r\n      return;\r\n    }\r\n    addNeighbors(Grid);\r\n    setGrid(() => Grid);\r\n\r\n    const startNode = Grid[nodeStartRow][nodeStartCol];\r\n    const endNode = Grid[nodeEndRow][nodeEndCol];\r\n\r\n    let path = dijkstra(startNode, endNode);\r\n\r\n    let Path = path.path;\r\n\r\n    let Visited = path.visitedNodes;\r\n\r\n    visualizing = true;\r\n\r\n    for (let i = 0; i <= Visited.length; i++) {\r\n      if (i === Visited.length) {\r\n        setTimeout(() => {\r\n          shortestPath(Path, startNode, endNode);\r\n          visualizing = false;\r\n        }, 16 * i);\r\n      } else {\r\n        setTimeout(() => {\r\n          const node = Visited[i];\r\n          if (node !== startNode && node !== endNode) {\r\n            document.getElementById(`node-${node.x}-${node.y}`).className =\r\n              \"Node node-visited\";\r\n          }\r\n        }, 15 * i);\r\n      }\r\n    }\r\n    visualized = true;\r\n  }\r\n\r\n  const randomWalls = () => {\r\n    if (visualizing) {\r\n      return;\r\n    }\r\n\r\n    Reset();\r\n\r\n    for (let i = 0; i < Grid.length; i++) {\r\n      for (let j = 0; j < Grid[i].length; j++) {\r\n        if (Grid[i][j].isEnd || Grid[i][j].isStart) {\r\n        } else if (Math.random(1) < 0.2) {\r\n          Grid[i][j].isWall = true;\r\n          document.getElementById(`node-${i}-${j}`).className = \"Node wall\";\r\n        } else {\r\n          Grid[i][j].isWall = false;\r\n        }\r\n      }\r\n    }\r\n\r\n    setGrid(() => Grid);\r\n  };\r\n\r\n  function generateMaze() {\r\n    if (!hasStart || !hasEnd || visualizing) {\r\n      return;\r\n    }\r\n\r\n    setGrid(() => Rmaze(Grid));\r\n    visualizing = true;\r\n    for (let i = 0; i < Grid.length; i++) {\r\n      setTimeout(() => {\r\n        for (let j = 0; j < Grid[i].length; j++) {\r\n          setTimeout(() => {\r\n            const node = Grid[i][j];\r\n            if (!node.isStart && !node.IsEnd && node.isWall) {\r\n              document.getElementById(`node-${node.x}-${node.y}`).className =\r\n                \"Node wall\";\r\n            } else if (!node.isStart && !node.isEnd && !node.isWall) {\r\n              document.getElementById(`node-${node.x}-${node.y}`).className =\r\n                \"Node\";\r\n            }\r\n            if (j == Grid[i].length - 1 && i == Grid.length - 1) {\r\n              visualizing = false;\r\n            }\r\n          }, 0 * j);\r\n        }\r\n      }, 0 * i);\r\n    }\r\n    visualized = false;\r\n  }\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"header\">\r\n        <h1 className=\"title\">Pathfinding Visualizer</h1>\r\n      </div>\r\n      <div className=\"header\">\r\n        <p>\r\n          click and drag to create walls - replace start and end nodes with\r\n          click\r\n        </p>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col-sm\">\r\n          <button onClick={visualizePath}>Vizualize Path (A*)</button>\r\n        </div>\r\n\r\n        <div className=\"col-sm\">\r\n          <button onClick={randomWalls}>Random Walls</button>\r\n        </div>\r\n        <div className=\"col-sm\">\r\n          <button onClick={Reset}>Reset</button>\r\n        </div>\r\n        <div className=\"col-sm\">\r\n          <button onClick={generateMaze}>\r\n            Generate Maze (Prim's Algorithm)\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {gridwithNode}\r\n    </div>\r\n  );\r\n};\r\nexport default Pathfind;\r\n"]},"metadata":{},"sourceType":"module"}